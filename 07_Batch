#!/bin/bash

#TODO:
# determine what the scheduler
# show queues, and determine status  (si with status)

  [[ $# == 0 ]] && O=N    #Command line options T=terse,v=Verbose, default Normal
  [[ $1 =~ t ]] && O=T 
  [[ $1 =~ v ]] && O=V 
  [[ ! "$O" =~ [NTV] ]] && echo "USAGE: $0 [-t|-v] # terse|verbose output"

STATUS=0

type sbatch >& /dev/null
[[ $? == 0 ]] && batch_sched+=(SLURM         ) && sched_cmds=(sbatch scancel squeue)
type qsub >& /dev/null
[[ $? == 0 ]] && batch_sched+=(PBS_TORQUE_SGE) && sched_cmds=(qsub qdel qstat)
type bsub >& /dev/null
[[ $? == 0 ]] && batch_sched+=(LSF           ) && sched_cmds=(bsub bkill bjobs)
type llsubmit >& /dev/null
[[ $? == 0 ]] && batch_sched+=(LOADLEVELER   ) && sched_cmds=(llsubmit llcancel llq)

if [[ ${#batch_sched[@]} -gt 1 ]]; then
   echo "BATCH: System error found multiple managers (${batch_sched[@]})"
   exit 1
fi

#batch_sched=()
if [[ ${#batch_sched[@]} == 0 ]]; then
   echo "BATCH: No BATCH MANAGER FOUND. Checked for: "
   echo "Checked for SLURM,  PBS_TORQUE_SGE, LSF  and LOADLEVER with commands:"
   echo "            sbatch, qsub,           bsub,    llsubmit, respectively."
   exit 1
elif [[ ${#batch_sched[@]} == 1 ]]; then
   BATCH_man=${batch_sched[@]}
   [[ $O == V ]] &&
     echo "BATCH:  Batch Manager is ${batch_sched[0]}"
fi

#host_name=`hostname -A`
#for sys in frontera vista stampede ls6; do
#  [[ $host_name =~ $sys ]] && AT_TACC=yes TACC_SYS=$sys
#done

#if [[ $AT_TACC == yes ]]; then
#  sched_cmds=(sbatch squeue scancel)
#  [[ $TACC_SYS == ls4 ]] && sched_cmds=(qsub qstat qdel)
#else
#  sched_cmds=(qsub qstat qdel)
#fi

for sched_cmd in ${sched_cmds[@]}; do
  output=`type $sched_cmd`
  if [[ $? == 0 ]]; then 
    found_cmds+=($sched_cmd)
  else
    not_found_cmds+=($sched_cmd)
  fi
done

if [[ ${#sched_cmds[@]} -eq ${#found_cmds[@]} ]]; then
   
   [[ $O == V ]] &&
     echo "All BATCH scheduler command(s) found: ${found_cmds[@]}"
   [[ $O == N ]] &&
     echo "BATCH:  All ${batch_sched[0]} cmds found: ${found_cmds[@]}."
else
   echo "Only found BATCH scheduler command(s): ${found_cmds[@]}"
   echo "Could not find the BATCH command(s): ${not_found_cmds[@]}"
   exit 1
fi

if [[ ${batch_sched[@]} == SLURM ]]; then

  #q_status=(`sinfo --noheader -o "%20P %5a"`)
     q_status=`sinfo --noheader -o "   %10P %5a"`
  queue_count=`sinfo --noheader -o "   %10P %5a" | wc -l`
     up_count=`echo $q_status | grep -o '\bup\b' | wc -l`
  
  [[ $up_count == 0 ]]             && echo "BATCH: NO QUEUES ARE UP"  && exit 1
  [[ $queue_count -ne $up_count ]] && STATUS=1
  
  if [[ $O == V ]]; then
    echo "PARTITION  AVAILABILITY" &&
    echo "$q_status"
  fi
  
  if [[ $queue_count -eq $up_count ]]; then 
    [[ $O == V ]] && echo "All  Queues   UP." 
  fi

    not_up_status=$(sinfo --noheader -o "(%P: %a)" | grep -v '\bup\b')
         up_status=$(sinfo --noheader -o "(%P: %a)" | grep    '\bup\b')
  
    if [[ $O == N  ]]; then
          up=( $(sinfo --noheader -o "%P %a" | grep    '\b\up\b' | sed 's/up//') )
      not_up=( $(sinfo --noheader -o "%P %a" | grep -v '\b\up\b' | sed 's/up//') )
      [[ ${#up[@]}     -gt 0 ]] && echo "Queues   UP: ${up[@]}"
      [[ ${#not_up[@]} -gt 0 ]] && echo "Queues DOWN: ${not_up[@]}"
    fi

    if [[ $queue_count -eq $up_count ]]; then
      [[ $O == T  ]] &&
        echo "QUEUES: ALL UP."
    else
      if [[ $O == T  ]]; then
        not_up_status=$(sinfo --noheader -o "(%P: %a)" | grep -v '\bup\b')
        echo "QUEUES: DOWNED  $not_up_status"
      fi
      STATUS=3
    fi

fi

exit $STATUS
