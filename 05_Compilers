#!/bin/bash
#  Determine which family of compilers are accessible
#  with the present Environment.
#  1.) Searches for compilers sets (families).
#  2.) Incomplete is reported as a failure.
#  3.) Expected to find gcc on all systems (failure otherwise)
#  4.) At TACC, warning if module cmd/function not found 
#      (reported as error in Module check).
#  5.) At TACC failur4 is no default compiler system.
#                                 2025-08-01 Kent Milfeld

[[ $# != 1 ]] && O=N    #Command line options T=terse,v=Verbose, default Normal
[[ $1 == t ]] && O=T 
[[ $1 == v ]] && O=V 

space='          ' tab=""
STATUS=0

host_name=`hostname -A`
for sys in frontera vista stampede ls6; do
  [[ $host_name =~ $sys ]] && AT_TACC=yes TACC_SYS=$sys
done

compiler_families=(nvidia intel oneAPI llvm gcc)

declare -A sets
sets[nvidia]="nvc nvc++ nvfortran"
 sets[intel]="icc icpc ifort"
sets[oneAPI]="icx icpx ifx"
  sets[llvm]="clang clang++ flang"
   sets[gcc]="gcc g++ gfortran"    #ALWAYS keep gcc last


#Check for all known compilers
echo "COMPILERS Searching Compiler Families (${compiler_families[@]})"
tab=$space

for family in ${compiler_families[@]}; do
  set=( ${sets[$family]} )
  found=()
  for compiler in ${set[@]}; do
      output=`type $compiler 2>&1`
      if [[ $? == 0 ]]; then 
        found+=($compiler)
      fi
  done

  flat_found="${found[@]}"
    flat_set="${set[@]}"
  if [[ ${#found[@]} == 0 ]]; then
     if [[ $O == V ]]; then
       printf "%s %-6s family NOT AVAILABLE in present module environment.\n" "$tab" $family
       [[ $family == gcc ]] && printf "%s       family is required!\n" "$tab" && STATUS=1
     fi
     [[ $family == gcc ]] && found_gcc_family=no
  fi

  if [[ ${#found[@]} == 1 ]] || [[ ${#found[@]} == 2 ]]; then
     if [[ $O == N ]] || [[ $O == V ]]; then
       printf "%s %-6s family SUBSET AVAILABLE in present module environment (%s).\n"  "$tab"  $family  "$flat_found"
       [[ $family == gcc ]] && printf "%s       Complete family is required!\n" "$tab" "$flat_set"  && STATUS=1
     fi
     [[ $family == gcc ]] && found_gcc_subset=yes && gcc_subset=($flat_found)
     found_subsets+=("${family}: $flat_found")
  fi

  if [[ ${#found[@]} == 3 ]] || [[ ${#found[@]} == 1 ]]; then
     if [[ $O == N ]] || [[ $O == V ]]; then
       printf '%s %-6s family in present module environment (%s).\n'  "$tab"  $family  "$flat_found"
     fi
     found_all_3+=("${family}: $flat_found") 
  fi

  if [[ ${compiler_families[-1]} == $family ]]; then
    if [[ $O == T ]]; then
      if [[ ${#found_subsets[@]} == 0 ]] && [[ ${#found_all_3[@]} == 0 ]];  then
        echo "$tab COMPILERS NONE FOUND (searched ${compiler_families[@]})"
        exit 1
      fi
      if [[ $found_gcc_family == no ]]; then
        echo "$tab COMPILERS GCC compilers not present."
        exit 1
      fi
      if [[ $found_gcc_subset == yes ]]; then
        echo "$tab COMPILERS Only subset of GCC compilers found ($gcc_subset)."
        exit 1
      fi
      if [[ ${#found_all_3[@]} == 0 ]]; then
        echo "$tab COMPILERS No complete complier set found. (Incomplete sets: ${found_subsets[@]})"
        exit 1
      fi
      [[ ${#found_subsets[@]} -gt 0 ]] && FSETS="${found_subsets[@]}" && echo HERE9
      echo "$tab COMPILERS ${found_all_3[@]} $FSETS" #(subsets: ${found_subsets[@]})
    fi 
  fi

done

exit $STATUS
