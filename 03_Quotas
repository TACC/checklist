#!/bin/bash

  [[ $# == 0 ]] && O=N    #Command line options T=terse,v=Verbose, default Normal
  [[ $1 =~ t ]] && O=T 
  [[ $1 =~ v ]] && O=V 
  [[ ! "$O" =~ [NTV] ]] && echo "USAGE: $0 [-t|-v] # terse|verbose output"

  STATUS=0

  HPC_OSs=(rocky centos fedora ubuntu debian)
  if [[ -f /etc/os-release ]]; then
    output=$( grep ^ID= /etc/os-release ) #e.g. ID="rocky"
    eval $output
    OS=$ID
    if [[ ! ${HPC_OSs[@]} =~ $OS ]]; then
       echo "internal ERROR: could not get OS from /etc/os-release"
       echo "  search list ( ${HPC_OSs[@]} )"
       exit 1
    fi  
  else
    [[ `uname -a` =~ Darwin ]] && OS=darwin
  fi  

  [[ $OS == darwin ]]          && host_name_opts='-s'
  [[ ${HPC_OSs[@]} =~ $OS   ]] && host_name_opts='-A'

  host_name=`hostname $host_name_opts`

  LOCAL_fs=(/tmp)

# HPC_SITE File Systems
  for sys in ls6 frontera stampede3 vista; do
    [[ $host_name =~ $sys ]] && AT_TACC=yes TACC_SYS=$sys
  done

  HPC_fs=()
  if [[ $AT_TACC == yes ]]; then
    if [[ $TACC_SYS == frontera  ]]; then
      HPC_fs=(/home1 /work)
      cmds[0]="lfs quota -u $USER /home1 | sed -n '3p'"
      cmds[1]="lfs quota -u $USER /work  | sed -n '3p'"
    fi

    if [[ $TACC_SYS == vista     ]] || 
       [[ $TACC_SYS == ls6       ]] || 
       [[ $TACC_SYS == stampede3 ]]; then
         HPC_fs=(/home1 /work)
         cmds[0]="    quota -w -f    /home1 | sed -n '3p'"
         cmds[1]="lfs quota -u $USER /work  | sed -n '3p'"
    fi
  fi
# end HPC_SITE File Systems
  

  # Get maximum space needed for File System Name in header
  ALL_fs=(${HPC_fs[@]} ${LOCAL_fs[@]})
  NAME_sp=5  # Have at least 5 spaces
  for name in ${ALL_fs[@]}; do
    len=${#name}
    [[ $len -gt $NAME_sp ]] && NAME_sp=$len
  done

  # Print header
  I_x='(M)'
  [[ $O == V ]] || [[ $O == N ]]  &&
    echo "FILESYSTEM QUOTAS: "   &&
    printf "%-${NAME_sp}s  Usage(GB)  Limit(GB)  %%Used  -  Inodes%s  Limit%s  %%Used\n" \
            "Disk" "$I_x" "$I_x"

  OS=`uname`
  [[ $OS == Linux  ]] && df_opts=-BG          # On Centos/Rocky
  [[ $OS == Darwin ]] && df_opts=-g           # On MacOS
  if [[ -z $df_opts ]]; then
    echo "FS QUOTAS: ERROR (internal): Don't know OS for df command.  Bailing"
    exit 1
  fi
  #TODO  Use new os-release check


# CHECK LOCAL FILES SYSTEMS
  if [[ $OS == Darwin ]]; then                #Uses a single df for space and inode
   # $ df  /tmp            
   # Filesystem   512-blocks      Used  Available Capacity iused      ifree %iused  Mounted on
   # /dev/disk3s5 1942700360 315051688 1571387520    17% 1544861 7856937600    0%   /System/Volumes/Data
  
    for fs in ${LOCAL_fs[@]}; do
      df_flds=(`df $df_opts $fs | tail -n 1`)
    
      space_used_no=${df_flds[4]%\%}
      inode_used_no=${df_flds[7]%\%}

   #Space
    S_total=${df_flds[1]}
    S_used=${df_flds[2]}
    S_remain=${df_flds[3]}
    PS_used=${df_flds[4]%\%}
    PS_remain=$(bc <<< "100*$S_remain/$S_total")
    [[ $PS_remain -lt 6 ]] && LS_warn+=($PS_remain) LS_warn_fs+=(${df_space_flds[5]})
    [[ $PS_remain -lt 3 ]] && LS_fail+=($PS_remain) LS_fail_fs+=(${df_space_flds[5]})

    #Inode info
    I_used=${df_flds[5]} 
    I_remain=${df_flds[6]} 
    I_total=$(( I_used + I_remain ))
    
    PI_used=${df_flds[7]%\%} 
    PI_remain=$(bc <<< "100*$I_remain/$I_total")
    [[ $PI_remain -lt 6 ]] && LI_warn+=($PI_remain) LI_warn_fs+=(${df_space_flds[5]})
    [[ $PI_remain -lt 3 ]] && LI_fail+=($PI_remain) LI_fail_fs+=(${df_space_flds[5]})
    
    I_remain=$(bc <<< "$I_remain/1000000")
    I_used=$(  bc <<< "$I_used  /1000000")
    I_total=$( bc <<< "$I_total /1000000")
    
   #  [[ $((100-space_used_no)) -lt 11 ]] || [[ $((100-inode_used_no)) -lt 11 ]] &&
   #  echo "WARNING: space or inode availability low on $file_sys" 
   #
   #  printf "%-8s [SPACE: %4s%% available of %4sGB]  [INODES: %4s%% free (%7s)]\n" \
   #       $file_sys $((100-space_used_no)) ${df_flds[1]} \
   #                 $((100-inode_used_no)) ${df_flds[6]}

    [[ $O == V ]] || [[ $O == N ]] &&
      printf "%-${NAME_sp}s %6s     %6s     %6s     %6s    %6s    %6s\n" \
              $fs \
              ${S_used} ${S_total} ${PS_used} \
              ${I_used} ${I_total} ${PI_used} 

    [[ $O == T ]] && T_out+=("$fs ${PS_remain}% ")

    done
  
  elif [[ $OS == Linux ]] && [[ ! -z $HPC_fs ]]; then  # requires executing df twice for space and inodes
    for fs in ${LOCAL_fs[@]}; do
      df_space_flds=(`df    $df_opts $fs | tail -n 1`)
      df_inode_flds=(`df -i $df_opts $fs | tail -n 1`)
    done
  
    #Space info
    S_total=${df_space_flds[1]%\G}
    S_used=${df_space_flds[2]%\G}
    S_remain=${df_space_flds[3]%\G}
    
    PS_used=$(bc   <<< "100*$S_used/$S_total")
    PS_remain=$(bc <<< "100*$S_remain/$S_total")
    [[ $PS_remain -lt 6 ]] && [[ $PS_remain -ge 3 ]] && HPCS_warn+=($PS_remain) HPCS_warn_fs+=(${df_space_flds[5]})
    [[ $PS_remain -lt 3 ]] &&                           HPCS_fail+=($PS_remain) HPCS_fail_fs+=(${df_space_flds[5]})
    
    #Inode info
    I_total=${df_inode_flds[1]} 
    I_used=${df_inode_flds[2]} 
    I_remain=${df_inode_flds[3]} 
    
    PI_used=$(bc   <<< "100*$I_used/$I_total")
    PI_remain=$(bc <<< "100*$I_remain/$I_total")
    [[ $PI_remain -lt 6 ]] && [[ $PI_remain -ge 3 ]] && HPCI_warn+=($PI_remain) HPCI_warn_fs+=(${df_space_flds[5]})
    [[ $PI_remain -lt 3 ]] &&                           HPCI_fail+=($PI_remain) HPCI_fail_fs+=(${df_space_flds[5]})
    
    I_remain=$(bc <<< "$I_remain/1000000")
    I_used=$(  bc <<< "$I_used  /1000000")
    I_total=$( bc <<< "$I_total /1000000")
  
    [[ $O == V ]] || [[ $O == N ]] &&
      printf "%-${NAME_sp}s %6s     %6s     %6s     %6s    %6s    %6s\n" \
              $fs \
              ${S_used} ${S_total} ${PS_used} \
              ${I_used} ${I_total} ${PI_used} 

    [[ $O == T ]] && T_out+=("$fs ${PS_remain}% ")

  fi

  for i in ${!HPC_fs[@]}; do

      fs=${HPC_fs[$i]}
      out=(`eval ${cmds[$i]}`)

      # stampede3$ quota -w -f /home1   ALSO: vista$ quota -w -f /home1 
      # Disk ...
      #      Filesystem        blocks   quota   limit   grace   files   quota   limit   grace
      # ...:/stampede3/home1 14442436     0  14648436          198310     0    500000    
      #               0         1         2      3       4        5       6       7       8
      #               0         1         2      3                4       5       6 

      # vista$ lfs quota -u milfeld /work 
      # Disk quotas for usr milfeld (uid 1117):
      # Filesystem  kbytes   quota   limit   grace   files   quota   limit   grace
      #    /work 450798756       0 1073741824       - 2999996       0 3000000       -


      common_out=(  ${out[@]})
      if [[ ${#out[@]} == 7 ]]; then  # common_out assumes grace is a value (0 if not used)
        common_out[5]=${out[4]}
        common_out[6]=${out[5]}
        common_out[7]=${out[6]}
        common_out[8]=0 common_out[4]=0
      else
        [[ ${common_out[4]} == "-" ]] && common_out[4]=0     #make grace 0 if "-"
        [[ ${common_out[8]} == "-" ]] && common_out[8]=0
      fi

      #Space info  KB->GB
      S_total=$(bc <<< "${common_out[3]}/1048576")
      S_used=$( bc <<< "${common_out[1]}/1048576")
      S_remain=$(( S_total - S_used ))

      PS_used=$(bc   <<< "100*$S_used/$S_total")
      PS_remain=$(bc <<< "100*$S_remain/$S_total")
      [[ $PS_remain -lt 6 ]] && [[ $PS_remain -ge 3 ]] && HPCS_warn+=($PS_remain) HPCS_warn_fs+=($fs)
      [[ $PS_remain -lt 3 ]] &&                           HPCS_fail+=($PS_remain) HPCS_fail_fs+=($fs)
  
      #Inode info
      I_remain=$(( ${common_out[7]} - ${common_out[5]} ))
      I_total=$(  bc <<< "scale=2; ${common_out[7]}/1000000")
      I_used=$(   bc <<< "scale=2; ${common_out[5]}/1000000")
      I_remain=$( bc <<< "scale=2; $I_remain/1000000")
  
      PI_used=$(bc   <<< "100*$I_used/$I_total")
      PI_remain=$(bc <<< "100*$I_remain/$I_total")
      [[ $PI_remain -lt 6 ]] &&  [[ $PI_remain -ge 3 ]] && HPCI_warn+=($PI_remain) HPCI_warn_fs+=($fs)
      [[ $PI_remain -lt 3 ]] &&                            HPCI_fail+=($PI_remain) HPCI_fail_fs+=($fs)

      [[ $O == N ]] || [[ $O == V ]] &&
      printf "%-${NAME_sp}s %6s     %6s     %6s     %6s    %6s    %6s\n" \
              $fs \
              ${S_used} ${S_total} ${PS_used} \
              ${I_used} ${I_total} ${PI_used}

      [[ $O == T ]] && T_out+=("$fs ${PS_remain}% ")

  done


# Print Check Info

  [[ $O == T ]] &&
    echo "FILESYSTEM QUOTAS: (${T_out[@]}  %remaining)"

  #WARN
  if [[ ${#LS_warn[@]} -ne 0 ]]; then
    STATUS=3
    for i in ${!LS_warn[@]}; do
      echo "WARNING:  ${LS_warn_fs[$i]} has only ${LS_warn[$i]}% storage available."  
    done
  fi

  if [[ ${#LI_warn[@]} -ne 0 ]]; then
    STATUS=3
    for i in ${!LI_warn[@]}; do
      echo "WARNING :  ${LI_warn_fs[$i]} has only ${LI_warn[$i]}% remaining inodes."  
    done
  fi

  if [[ ${#HPCS_warn[@]} -ne 0 ]]; then
    STATUS=3
    for i in ${!HPCS_warn[@]}; do
      echo "WARNING :  ${HPCS_warn_fs[$i]} has only ${HPCS_warn[$i]}% storage available."  
    done
  fi

  if [[ ${#HPCI_warn[@]} -ne 0 ]]; then
    STATUS=3
    for i in ${!HPCI_warn[@]}; do
      echo "WARNING :  ${HPCI_warn_fs[$i]} has only ${HPCI_warn[$i]}% remaining inodes."  
    done
  fi

  #FAIL
  if [[ ${#LS_fail[@]} -ne 0 ]]; then
    STATUS=1
    for i in ${!LS_fail[@]}; do
      echo "WARNING :  ${LS_fail_fs[$i]} has only ${LS_fail[$i]}% storage available."  
    done
  fi  

  if [[ ${#LI_fail[@]} -ne 0 ]]; then
    STATUS=1
    for i in ${!LI_fail[@]}; do
      echo "CRITICAL:  ${LI_fail_fs[$i]} has only ${LI_fail[$i]}% remaining inodes."  
    done
  fi  

  if [[ ${#HPCS_fail[@]} -ne 0 ]]; then
    STATUS=1
    for i in ${!HPCS_fail[@]}; do
      echo "CRITICAL:  ${HPCS_fail_fs[$i]} has only ${HPCS_fail[$i]}% storage available."  
    done
  fi  

  if [[ ${#HPCI_fail[@]} -ne 0 ]]; then
    STATUS=1
    for i in ${!HPCI_fail[@]}; do
      echo "CRITICAL:  ${HPCI_fail_fs[$i]} has only ${HPCI_fail[$i]}% remaining inodes."  
    done
  fi  

  exit $STATUS
