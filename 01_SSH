#!/bin/bash
# 1.) Check permission on ~/.ssh directory
# 2.) Check permission on ~/.ssh/*_id.pub 
# 3.) Check permission on ~/.ssh/*_id
# 4.) Check permission on ~/.ssh/authorized_keys
# 5.) Make sure *_id.pub is in authorized_keys

#TODO What if multiple keys?
#TODO Exist later if 0 keys found (check directory permissions
#TODO Exist later if OK with multiple keys
#                                 2025-08-01 Kent Milfeld

  [[ $# != 1 ]] && O=N    #Command line options T=terse,v=Verbose, default Normal
  [[ $1 == t ]] && O=T
  [[ $1 == v ]] && O=V

  STATUS=0

  HPC_OSs=(rocky centos fedora ubuntu debian)

   SSH_DIR=$HOME/.ssh
   pub_key_files=( id_ed25519.pub id_rsa.pub id_ecdsa.pub )
  priv_key_files=( id_ed25519     id_rsa     id_ecdsa )


  ##NEW
  filenames=( .ssh         pub_key        priv_key        authorized_keys )
   perms=(    drwx------   -rw-r--r--     -rw-------      -rw------- )
  set_perms=( 700          644            600             600 )
  functions=( directory    "public key"   "private key"   authorized_keys )

  if [[ -f /etc/os-release ]]; then
    output=$( grep ^ID= /etc/os-release ) #e.g. ID="rocky"
    eval $output
    OS=$ID
    if [[ ! $HPC_OSs =~ $OS ]]; then
       echo " internal ERROR: could not get OS from /etc/os-release"
       echo "   search list ( ${HPC_OSs[@]} )"
       exit 1
    fi
  else
    [[ `uname -a` =~ Darwin ]] && OS=darwin
  fi

echo "SSH setup"

# SSH Directory
if [[ ! -d $SSH_DIR ]]; then  # Does $HOME/.ssh exist
   unfound=(${filenames[0]})
   echo " NO \$HOME/.ssh directory found." && exit 1
else
  found=(${filenames[0]})
  [[ $O == N ]] || [[ $O == V ]] &&
  echo " Found ${functions[0]} ${filenames[1]}."
  
fi

# PUBLIC KEY file(s)
output=`ls $SSH_DIR/*.pub 2>/dev/null`  #pub key
if [[ $? != 0 ]]; then
  echo " NO ${functions[1]} Found (of form \*pub)."
  STATUS=1
else   #determine key type
  for file in ${pub_key_files[@]}; do
    [[ $output =~ $file  ]] && pub_keys+=($file)
  done
fi

if [[ ${#pub_keys[@]}  == 1 ]]; then
  filenames[1]=${pub_keys[0]}
  found+=(${filenames[1]})

  [[ $O == N ]] || [[ $O == V ]] &&
    echo " Found ${functions[1]} ${filenames[1]}" && pub_key=${pub_keys[0]}
fi
if [[ ${#pub_keys[@]} == 0 ]]; then
  unfound+=(${filenames[1]})
  skip=(1)
  echo " NO ${functions[1]} Found (searched: ${pub_key_files[@]})" && STATUS=1
fi

# PRIVATE KEY file(s)
for file in ${priv_key_files[@]}; do
  output=`ls $SSH_DIR/$file 2>/dev/null`  #priv key
  [[ $? == 0 ]] && priv_keys+=($file)
done

if [[ ${#priv_keys[@]}  == 1 ]]; then
  filenames[2]=${priv_keys[0]}
  found+=(${filenames[2]})

  [[ $O == N ]] || [[ $O == V ]] &&
    echo " Found ${functions[2]} ${filenames[2]}" && priv_key=${priv_keys[0]}
fi
if [[ ${#priv_keys[@]} == 0 ]]; then
  unfound+=(${filenames[2]})
  skip+=(2)
  echo " NO ${functions[2]} Found (searched: ${priv_key_files[@]})" && STATUS=1
fi

# AUTHORIZED_KEYS file
output=`ls $SSH_DIR/${filenames[3]} 2>/dev/null`  #authorized_keys
if [[ $? != 0 ]]; then
  unfound+=(${filenames[3]})
  skip+=(3)
  echo " NO ${functions[3]} file Found."
  STATUS=1
else
  found+=(${filenames[3]})
fi

if [[ $O == T ]]; then
  flat_found="${found[@]}" flat_unfound="${unfound[@]}"
  printf  " SSH Found files :    (%s)\n" "$flat_found"
  [[ ${#unfound[@]} -gt 0 ]] &&
  printf " SSH NOT Found files: (%s)\n" "$flat_unfound"
fi

check_perm(){

  pathname=${CL_PATHNAME-$1} 
      perm=${CL_PERM-$2} 
   setperm=${CL_SETPERM-$1} 

  local O=$4
  return_status=0

  opts='-c %A'
  [[ $OS == darwin ]]          && opts='-f %Sp'
  [[ ${HPC_OSs[@]} =~ $OS   ]] && opts='-c %A'
  stat_perm=`stat $opts ${pathname}`
  status=$?
  
  name=`basename ${pathname}`
  short_pathname=$(echo ${pathname} | sed 's@'$HOME'@$HOME@')
  
  
  if [[ $stat_perm == ${perms[$i]} ]]; then
    [[ $O == N ]] || [[ $O == V ]] &&
    printf " %-40s %s\n"  "Permissions correct for $name:" "${perms[$i]}"
  else
    return_status=1
    echo " FAILED Permissions on $short_pathname are incorrect."
    echo "   Found:     $stat_perm permissions for $name"
    echo "   Should be: ${perms[$i]}"
    echo "   Execute:   chmod ${set_perms[$i]} $short_pathname"
  fi

}

for i in ${!filenames[@]}; do
  if [[ ! "${skip[@]}" =~ $i ]]; then
    path_name=$SSH_DIR/${filenames[$i]}
    [[ $i == 0 ]] &&  path_name=$SSH_DIR  #Special, the Directory

    check_perm ${path_name} ${perms[$i]} ${set_perms[$i]} $O

    [[ $return_status != 0 ]] && STATUS=$return_status
  fi
done

if [[ $O == T ]] && [[ $STATUS == 0 ]]; then
   echo " $T_string" 
   echo " Permissions OK for: ${filenames[@]}" 
fi

exit $STATUS
