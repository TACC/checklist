#!/bin/bash
#  Determine which family of compilers are accessible
#  with the present Environment.
#  1.) Searches for compilers sets (families).
#  2.) Incomplete is reported as a failure.
#  3.) Expected to find gcc on all systems (failure otherwise)
#  4.) At TACC, warning if module cmd/function not found 
#      (reported as error in Module check).
#  5.) At TACC failur4 is no default compiler system.
#                                 2025-08-01 Kent Milfeld
STATUS=0
space='          ' tab=""
host_name=`hostname -A`
for sys in frontera vista stampede ls6; do
  [[ $host_name =~ $sys ]] && AT_TACC=yes TACC_SYS=$sys
done

compiler_families=( nvidia intel oneAPI llvm gcc)

declare -A sets
sets[nvidia]="nvc nvc++ nvfortran"
 sets[intel]="icc icpc ifort"
sets[oneAPI]="icx icpx ifx"
  sets[llvm]="clang clang++ flang"
   sets[gcc]="gcc g++ gfortran"    #ALWAYS keep gcc last


#Check for all known compilers
echo "Searching for Compiler Families (complete sets: C/C++/Fortran)"
tab=$space

for family in ${compiler_families[@]}; do
  set=( ${sets[$family]} )
  found=()
  for compiler in ${set[@]}; do
      output=`type $compiler 2>&1`
      if [[ $? == 0 ]]; then 
        found+=($compiler)
      fi
  done

  flat_found="${found[@]}"
    flat_set="${set[@]}"
  if [[ ${#found[@]} == 0 ]]; then
     printf "%s %-6s family    NOT AVAILABLE in present module environment.\n"       "$tab" $family
     [[ $family == gcc ]] && printf "%s       family is required!\n" "         $tab" && STATUS=1
  fi

  if [[ ${#found[@]} == 1 ]] || [[ ${#found[@]} == 2 ]]; then
     printf "%s %-6s family SUBSET AVAILABLE in present module environment (%s).\n"  "$tab"  $family  "$flat_found"
     [[ $family == gcc ]] && printf "%s       Complete family is required!\n" "$tab" "$flat_set"  && STATUS=1
  fi

  if [[ ${#found[@]} == 3 ]] || [[ ${#found[@]} == 1 ]]; then
     printf '%s %-6s family    ALL AVAILABLE in present module environment (%s).\n'  "$tab"  $family  "$flat_found"
  fi
done

exit $STATUS
